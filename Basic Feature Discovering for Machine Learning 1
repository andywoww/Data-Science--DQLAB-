--------------------------------- Import Library yang digunakan

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
sns.set(style="darkgrid")
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import OneHotEncoder, LabelEncoder, StandardScaler
from sklearn.metrics import roc_curve, auc
from sklearn.model_selection import StratifiedKFold

import string
import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning) 

pandas ==== data
matplotlib = grafik


--------------------------------- Import Data Set dan Concat Data Frame
def concat_df(train_data, test_data):
    # Returns a concatenated df of training and test set
    return pd.concat([train_data, test_data],sort=True).reset_index(drop=True)				

df_train = pd.read_csv('https://academy.dqlab.id/dataset/challenge/feature-engineering/titanic_train.csv')
df_test = pd.read_csv('https://academy.dqlab.id/dataset/challenge/feature-engineering/titanic_test.csv')
df_all = concat_df(df_train, df_test)

df_train.name = 'Training Set'
df_test.name = 'Test Set'
df_all.name = 'All Set' 

dfs = [df_train, df_test]

------------------------------------ Exploring Data
print('Number of Training Examples = {}'.format(df_train))
print('Number of Test Examples = {}\n'.format(df_test))
print('Training X Shape = {}'.format(df_train))
print('Training y Shape = {}\n'.format(df_train))
print('Test X Shape = {}'.format(df_test))
print('Test y Shape = {}\n'.format(df_test))
print(df_tain.columns)
print(df_test.columns)

---------------------------------- Missing Value dan Contoh data
df_train.info(memory_usage=False)
print(df_train.head(10))

---------------------------------- Mengetahui Korelasi Fitur
df_train_corr = df_train
print(df_train_corr.to_string())

---------------------------------- Menggenali Missing Data Dari Kolom
df_train.name = 'Training Set'
df_test.name = 'Test Set'
df_all.name = 'All Set' 

dfs = [df_train, df_test]

def display_missing(df):    
    for col in df.columns.tolist():          
        print('{} column missing values: {}'.format(col, df[col].isnull().sum()))
    print('\n')

for df in dfs:
    print('{}'.format(df.name))
    display_missing(df)

--------------------------------- Mencari Nilai Untuk Missing Value
age_by_pclass_sex = df_all.groupby(['Sex', 'Pclass']).median()['Age']

for pclass in range(1, 4):
    for sex in ['female', 'male']:
        print('Median age of Pclass {} {}s: {}'.format(pclass, sex, age_by_pclass_sex[sex][pclass]))
print('Median age of all passengers: {}'.format(df_all['Age'].median()))

# Filling the missing values in Age with the medians of Sex and Pclass groups
df_all['Age'] = df_all.groupby(['Sex', 'Pclass'])['Age'].apply(lambda x: x.fillna(x.median()))
